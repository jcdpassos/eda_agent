

import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt # Importa Matplotlib
from dotenv import load_dotenv
from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain_google_genai import ChatGoogleGenerativeAI

# Carregar Vari√°veis de Ambiente
load_dotenv()

# --- Configura√ß√µes Iniciais da P√°gina ---
st.set_page_config(
    page_title="Agente de An√°lise de Dados",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Agente Analista de Dados com Gemini")
st.markdown("""
Eu sou um agente de IA especializado em an√°lise e visualiza√ß√£o de dados. 
Fa√ßa o upload de um arquivo CSV e me pe√ßa para gerar insights, resumos e gr√°ficos diversificados.
""")

# --- Obter a chave de API do ambiente ---
google_api_key = os.getenv("GOOGLE_API_KEY")

# --- Sidebar para Upload ---
with st.sidebar:
    st.header("Configura√ß√µes")
    uploaded_file = st.file_uploader("Fa√ßa o upload do seu arquivo CSV", type=["csv"])

# --- L√≥gica principal da aplica√ß√£o ---
if not google_api_key:
    st.error("A chave de API do Google (GOOGLE_API_KEY) n√£o foi encontrada.")
    st.info("Por favor, crie um arquivo .env e adicione sua chave de API nele.")
elif uploaded_file is None:
    st.info("Por favor, fa√ßa o upload de um arquivo CSV para come√ßar.")
else:
    try:
        df = pd.read_csv(uploaded_file)
        
        # <<< IN√çCIO DA ALTERA√á√ÉO SOLICITADA >>>
        # Adiciona uma mensagem de sucesso e exibe as primeiras linhas do dataframe.
        st.success("Arquivo CSV carregado com sucesso!")
        st.subheader("Amostra dos Dados:")
        # O comando st.dataframe() cria uma tabela interativa na tela.
        # Usamos df.head() para mostrar apenas as 5 primeiras linhas,
        # o que evita sobrecarregar a tela com arquivos muito grandes.
        st.dataframe(df.head())
        # <<< FIM DA ALTERA√á√ÉO SOLICITADA >>>
        
        # --- Inicializa√ß√£o do Agente ---
        llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash-exp", 
            google_api_key=google_api_key,
            temperature=0.1 # Temperatura mais baixa para respostas mais precisas
        )

        # O 'agent_executor' √© o que realmente executa as tarefas
        agent_executor = create_pandas_dataframe_agent(
            llm, 
            df, 
            verbose=True,
            agent_executor_kwargs={"handle_parsing_errors": True},
            allow_dangerous_code=True 
        )

        # --- Gerenciamento do Estado do Chat ---
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Exibe mensagens do hist√≥rico a cada nova execu√ß√£o do script
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                # MELHORIA 1: Verifica se a mensagem √© um gr√°fico ou texto
                if "plot" in message:
                    st.pyplot(message["plot"])
                else:
                    st.markdown(message["content"])

        # Captura a pergunta do usu√°rio
        if prompt := st.chat_input("Ex: 'Crie um mapa de calor de correla√ß√µes'"):
            # Adiciona a pergunta do usu√°rio ao hist√≥rico para exibi√ß√£o
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # Prepara a mensagem para o assistente
            with st.chat_message("assistant"):
                with st.spinner("Analisando e gerando resposta... ü§î"):
                    # MELHORIA 2: Prompt de Engenharia Detalhado para Gr√°ficos
                    full_prompt = f"""
                    Voc√™ √© um agente de an√°lise de dados especialista em Python, Pandas, Matplotlib e Seaborn.

                    Sua tarefa √© responder √† pergunta do usu√°rio sobre o dataframe fornecido.

                    PERGUNTA DO USU√ÅRIO: "{prompt}"

                    INSTRU√á√ïES PARA GERAR GR√ÅFICOS:
                    1. QUANDO uma pergunta exigir um gr√°fico, GERE o c√≥digo para criar a visualiza√ß√£o usando Matplotlib ou Seaborn.
                    2. **NUNCA use 'plt.show()'**. Em vez disso, a √∫ltima linha do seu bloco de c√≥digo de plotagem deve ser a figura em si (ex: `fig`). 
                    3. Se voc√™ criar uma figura com `plt.subplots()`, certifique-se de que a vari√°vel `fig` seja retornada no final.
                    4. Use t√≠tulos claros, r√≥tulos de eixos e legendas para tornar o gr√°fico informativo.
                    5. Se a pergunta for amb√≠gua, fa√ßa uma suposi√ß√£o razo√°vel sobre o tipo de gr√°fico a ser gerado.
                    6. Responda sempre em portugu√™s do Brasil.

                    Exemplo de como gerar um gr√°fico de dispers√£o:
                    ```python
                    import matplotlib.pyplot as plt
                    fig, ax = plt.subplots()
                    ax.scatter(df['coluna_x'], df['coluna_y'])
                    ax.set_title('T√≠tulo do Gr√°fico')
                    ax.set_xlabel('Eixo X')
                    ax.set_ylabel('Eixo Y')
                    # A √∫ltima linha √© a vari√°vel 'fig', n√£o 'plt.show()'
                    fig
                    ```
                    
                    Agora, analise a pergunta do usu√°rio e forne√ßa a resposta em texto ou gere o c√≥digo para o gr√°fico.
                    """

                    try:
                        # Executa o agente com o prompt detalhado
                        response = agent_executor.invoke({"input": full_prompt})
                        
                        # MELHORIA 3: L√≥gica para tratar a sa√≠da (texto ou gr√°fico)
                        output_text = response.get('output', 'N√£o foi poss√≠vel gerar uma resposta.')
                        
                        # O LangChain experimentalmente coloca o gr√°fico em 'stdout' ou similar.
                        # Uma maneira mais robusta √© verificar se uma figura foi criada.
                        # A abordagem mais simples √© renderizar o texto e verificar a figura global.
                        
                        fig = plt.gcf() # Pega a figura global corrente do Matplotlib
                        
                        # Se a figura tiver eixos (ou seja, n√£o est√° vazia), ela √© um gr√°fico
                        if fig.get_axes():
                            st.pyplot(fig)
                            st.session_state.messages.append({"role": "assistant", "plot": fig})
                        else:
                            st.markdown(output_text)
                            st.session_state.messages.append({"role": "assistant", "content": output_text})
                        
                        plt.clf() # Limpa a figura para o pr√≥ximo gr√°fico

                    except Exception as e:
                        st.error(f"Ocorreu um erro ao processar sua pergunta: {e}")

    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o arquivo: {e}")